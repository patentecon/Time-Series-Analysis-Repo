---
title: "Time Series Analysis: Week 1"
author: Orkhan Hasanaliyev
format: 
  revealjs:
    transition: slide
    slide-number: true
editor: visual
---

## 

*"It is difficult to make predictions, especially about the future."*\
                                                                                                         *Niels Bohr*

## Syllabus

[Syllabus](images/ECON%20174%20Syllabus%20Spring%202024.docx)

Textbook: *Forecasting: principles and practice* by Hyndman and Athanasopoulos, available free online at <https://otexts.com/fpp3/>

Accessing course data and scripts:

-   Using github (might need GitZip for github browser extension to download weekly content) <https://github.com/patentecon/Time-Series-Analysis-Repo>

-   Camino

## R and RStudio

Download and install R and RStudio:

<https://posit.co/download/rstudio-desktop/>

Refer to these videos for help:

For Macs: <https://www.youtube.com/watch?v=f9vEBtwcD6M>

For Windows: <https://www.youtube.com/watch?v=H9EBlFDGG4k>

## Use R Project for Your Coursework

-   Allows quick switching between projects within the RStudio IDE.

-   Opening a project restores your open tabs from last use.

-   Encourages organised file structure practices, notably a project should contain all files used by that project.

## Create a New Project

![](images/project_1.png)

## Select New Directory

![](images/project_2.png)

## Select New Project

![](images/project_3.png)

## Name Your Project

![](images/project_4.png)

## Main Packages

-   Install the following packages: install.packages(c("tidyverse", "fpp3"))

## Load ffp3 package

-   Load fpp3 package

```{r}
#| label: setup
#| echo: true
#| message: true
library(fpp3)

```

## Benefits of using a Project

```{r}
#| echo: true
#| message: true
cars
```

## Benefits of using a Project

-   Create a data folder, and then write a file in csv format.

-   This way we use relative paths instead of absolute paths

```{r}
#| echo: true
#| message: true
readr::write_csv(cars, "data/cars.csv")
```

## Check the type of data

```{r}
#| echo: true
#| message: true
data()
```

-   In ECON 41 you used data.frame and/or tibble.
-   What is the type of cars?

## What is the type of cars?

```{r}
#| echo: true
#| message: true
class(cars)
```

What is the type of AirPassengers?

## What is the type of AirPassengers?

```{r}
#| echo: true
#| message: true
class(AirPassengers)
```

What is the type of us_rent_income?

## What is the type of us_rent_income?

```{r}
#| echo: true
#| message: true
us_rent_income
```

What is the type of global_economy?

## What is the type of global_economy?

```{r}
#| echo: true
#| message: true
global_economy
```

`tsibble` objects extend tidy data frames (`tibble` objects) by introducing temporal structure and works well with tidyverse functions.

## `tsibble` Objects

1.  **Index** is a variable with inherent ordering from past to present.
2.  **Key** is a set of variables that define observational units over time.
3.  Each observation should be uniquely identified by index and key.
4.  Each observational unit should be measured at a common interval, if regularly spaced.

## global_economy data

-   15150 observations (rows) and 9 variables (columns)

-   Data frequency is annual: \[1Y\]

-   **Index**: Year

-   **Key**: Country. There are 263 time series, one for each country

-   The rest 7 variables are **Measured Variables**

**Warm Up: Explore another tsibble data**

## Creating `tsibble` object

Let's create a `tsibble` object using `tsibble()` function

```{r}
#| echo: true
#| message: true
myGPA <- tsibble(
  Year = 2021:2024,
  Observation = c(3.5, 3.7, 3.9, 3.2),
  index = Year
)
myGPA
```

## Coercing `tibble` object to `tsibble`

Here is the `tibble` object

```{r}
#| echo: true
#| message: true
myGPA <- tibble(
  Year = 2021:2024,
  Observation = c(3.5, 3.7, 3.9, 3.2)
)
myGPA
```

## Coercing `tibble` object to `tsibble`

By utilizing `as_tsibble()` we get

```{r}
#| echo: true
#| message: true
myGPA|> 
  as_tsibble(index=Year)
```

## Example 1

Let's download an excel file and read it. Note, this data is in `tibble`

```{r}
#| echo: true
#| message: true
download.file("http://OTexts.com/fpp3/extrafiles/tourism.xlsx",
              tourism_file <- tempfile(), mode = "wb")
my_tourism <- readxl::read_excel(tourism_file) 
my_tourism

```

## Example 1 (con't)

Coerce `tibble` object to `tsibble`

```{r}
#| echo: true
#| message: true
my_tourism <- my_tourism |>
  mutate(Quarter = yearquarter(Quarter)) |>
  as_tsibble(
    index = Quarter,
    key = c(Region, State, Purpose)
  )
my_tourism
```

## Example 1 (con't)

```{r}
#| echo: true
#| message: true
distinct_Region <- distinct(my_tourism, Region)

distinct_State <- distinct(my_tourism, State)
distinct_Purpose <- distinct(my_tourism, Purpose)

print(c(distinct_Region, distinct_State,distinct_Purpose))

```

## Example 1 (con't)

```{r}
#| echo: true
#| message: true
nobs <- my_tourism |>
  count(Region, State, Purpose)
print(nobs)
```

## The `tsibble` index

Common time index variables can be created with these functions:

```{r tstable1, echo=FALSE}
tribble(
  ~`Frequency`, ~Function,
  "Annual", "`start:end`",
  "Quarterly", "`yearquarter()`",
  "Monthly", "`yearmonth()`",
  "Weekly", "`yearweek()`",
  "Daily", "`as_date()`, `ymd()`",
  "Sub-daily", "`as_datetime()`"
) |>
  knitr::kable(booktabs = TRUE)
```

## time index examples

```{r}
#| echo: true
#| message: true
2020:2024

yearquarter("2024 Q1")+0:3

yearmonth("2024 1")+0:4

yearweek("2023 1")+0:5

```

## time index examples

```{r}
#| echo: true
#| message: true

as.Date("2024-01-22") + 0:3

ymd("2024-04-03")+ 0:4

as_datetime("2024-04-03 00:09:15")+0:2
```

## Working with `tsibble` objects

Let's use the `filter()` function to select rows.

```{r }
my_tourism |>
  filter(Region == "Alice Springs")
```

## Working with `tsibble` objects

Let's calculate average trips over Purpose for each quarter in Alice Springs

```{r }
my_tourism |>
  filter(Region == "Alice Springs") |>
  summarise(AverageTrips=mean(Trips))
```

## Working with `tsibble` objects

Create new tsibble with total number of trips by state

```{r}
state_tourism <- my_tourism |>
  group_by(State) |>
  summarise(TotalTrips = sum(Trips))

state_tourism
```
